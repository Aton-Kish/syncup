// Code generated by MockGen. DO NOT EDIT.
// Source: tracker.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/Aton-Kish/syncup/internal/syncup/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackerRepository is a mock of TrackerRepository interface.
type MockTrackerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerRepositoryMockRecorder
}

// MockTrackerRepositoryMockRecorder is the mock recorder for MockTrackerRepository.
type MockTrackerRepositoryMockRecorder struct {
	mock *MockTrackerRepository
}

// NewMockTrackerRepository creates a new mock instance.
func NewMockTrackerRepository(ctrl *gomock.Controller) *MockTrackerRepository {
	mock := &MockTrackerRepository{ctrl: ctrl}
	mock.recorder = &MockTrackerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackerRepository) EXPECT() *MockTrackerRepositoryMockRecorder {
	return m.recorder
}

// Doing mocks base method.
func (m *MockTrackerRepository) Doing(ctx context.Context, status model.TrackerStatus, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Doing", ctx, status, msg)
}

// Doing indicates an expected call of Doing.
func (mr *MockTrackerRepositoryMockRecorder) Doing(ctx, status, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doing", reflect.TypeOf((*MockTrackerRepository)(nil).Doing), ctx, status, msg)
}

// Done mocks base method.
func (m *MockTrackerRepository) Done(ctx context.Context, status model.TrackerStatus, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", ctx, status, msg)
}

// Done indicates an expected call of Done.
func (mr *MockTrackerRepositoryMockRecorder) Done(ctx, status, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTrackerRepository)(nil).Done), ctx, status, msg)
}
