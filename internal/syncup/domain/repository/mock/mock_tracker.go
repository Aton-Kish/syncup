// Code generated by MockGen. DO NOT EDIT.
// Source: tracker.go
//
// Generated by this command:
//
//	mockgen -source=tracker.go -destination=./mock/mock_tracker.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTrackerRepository is a mock of TrackerRepository interface.
type MockTrackerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerRepositoryMockRecorder
}

// MockTrackerRepositoryMockRecorder is the mock recorder for MockTrackerRepository.
type MockTrackerRepositoryMockRecorder struct {
	mock *MockTrackerRepository
}

// NewMockTrackerRepository creates a new mock instance.
func NewMockTrackerRepository(ctrl *gomock.Controller) *MockTrackerRepository {
	mock := &MockTrackerRepository{ctrl: ctrl}
	mock.recorder = &MockTrackerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackerRepository) EXPECT() *MockTrackerRepositoryMockRecorder {
	return m.recorder
}

// Failed mocks base method.
func (m *MockTrackerRepository) Failed(ctx context.Context, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", ctx, msg)
}

// Failed indicates an expected call of Failed.
func (mr *MockTrackerRepositoryMockRecorder) Failed(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockTrackerRepository)(nil).Failed), ctx, msg)
}

// InProgress mocks base method.
func (m *MockTrackerRepository) InProgress(ctx context.Context, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InProgress", ctx, msg)
}

// InProgress indicates an expected call of InProgress.
func (mr *MockTrackerRepositoryMockRecorder) InProgress(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProgress", reflect.TypeOf((*MockTrackerRepository)(nil).InProgress), ctx, msg)
}

// Success mocks base method.
func (m *MockTrackerRepository) Success(ctx context.Context, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success", ctx, msg)
}

// Success indicates an expected call of Success.
func (mr *MockTrackerRepositoryMockRecorder) Success(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockTrackerRepository)(nil).Success), ctx, msg)
}
