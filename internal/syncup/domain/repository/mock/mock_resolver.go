// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go
//
// Generated by this command:
//
//	mockgen -source=resolver.go -destination=./mock/mock_resolver.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/Aton-Kish/syncup/internal/syncup/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResolverRepository is a mock of ResolverRepository interface.
type MockResolverRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResolverRepositoryMockRecorder
}

// MockResolverRepositoryMockRecorder is the mock recorder for MockResolverRepository.
type MockResolverRepositoryMockRecorder struct {
	mock *MockResolverRepository
}

// NewMockResolverRepository creates a new mock instance.
func NewMockResolverRepository(ctrl *gomock.Controller) *MockResolverRepository {
	mock := &MockResolverRepository{ctrl: ctrl}
	mock.recorder = &MockResolverRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolverRepository) EXPECT() *MockResolverRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockResolverRepository) Delete(ctx context.Context, apiID, typeName, fieldName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, apiID, typeName, fieldName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResolverRepositoryMockRecorder) Delete(ctx, apiID, typeName, fieldName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResolverRepository)(nil).Delete), ctx, apiID, typeName, fieldName)
}

// Get mocks base method.
func (m *MockResolverRepository) Get(ctx context.Context, apiID, typeName, fieldName string) (*model.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, apiID, typeName, fieldName)
	ret0, _ := ret[0].(*model.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResolverRepositoryMockRecorder) Get(ctx, apiID, typeName, fieldName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResolverRepository)(nil).Get), ctx, apiID, typeName, fieldName)
}

// List mocks base method.
func (m *MockResolverRepository) List(ctx context.Context, apiID string) ([]model.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, apiID)
	ret0, _ := ret[0].([]model.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockResolverRepositoryMockRecorder) List(ctx, apiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockResolverRepository)(nil).List), ctx, apiID)
}

// ListByTypeName mocks base method.
func (m *MockResolverRepository) ListByTypeName(ctx context.Context, apiID, typeName string) ([]model.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTypeName", ctx, apiID, typeName)
	ret0, _ := ret[0].([]model.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTypeName indicates an expected call of ListByTypeName.
func (mr *MockResolverRepositoryMockRecorder) ListByTypeName(ctx, apiID, typeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTypeName", reflect.TypeOf((*MockResolverRepository)(nil).ListByTypeName), ctx, apiID, typeName)
}

// Save mocks base method.
func (m *MockResolverRepository) Save(ctx context.Context, apiID string, resolver *model.Resolver) (*model.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, apiID, resolver)
	ret0, _ := ret[0].(*model.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockResolverRepositoryMockRecorder) Save(ctx, apiID, resolver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockResolverRepository)(nil).Save), ctx, apiID, resolver)
}
