// Code generated by MockGen. DO NOT EDIT.
// Source: environment_variables.go
//
// Generated by this command:
//
//	mockgen -source=environment_variables.go -destination=./mock/mock_environment_variables.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/Aton-Kish/syncup/internal/syncup/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentVariablesRepository is a mock of EnvironmentVariablesRepository interface.
type MockEnvironmentVariablesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentVariablesRepositoryMockRecorder
}

// MockEnvironmentVariablesRepositoryMockRecorder is the mock recorder for MockEnvironmentVariablesRepository.
type MockEnvironmentVariablesRepositoryMockRecorder struct {
	mock *MockEnvironmentVariablesRepository
}

// NewMockEnvironmentVariablesRepository creates a new mock instance.
func NewMockEnvironmentVariablesRepository(ctrl *gomock.Controller) *MockEnvironmentVariablesRepository {
	mock := &MockEnvironmentVariablesRepository{ctrl: ctrl}
	mock.recorder = &MockEnvironmentVariablesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentVariablesRepository) EXPECT() *MockEnvironmentVariablesRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEnvironmentVariablesRepository) Get(ctx context.Context, apiID string) (model.EnvironmentVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, apiID)
	ret0, _ := ret[0].(model.EnvironmentVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEnvironmentVariablesRepositoryMockRecorder) Get(ctx, apiID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEnvironmentVariablesRepository)(nil).Get), ctx, apiID)
}

// Save mocks base method.
func (m *MockEnvironmentVariablesRepository) Save(ctx context.Context, apiID string, variables model.EnvironmentVariables) (model.EnvironmentVariables, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, apiID, variables)
	ret0, _ := ret[0].(model.EnvironmentVariables)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockEnvironmentVariablesRepositoryMockRecorder) Save(ctx, apiID, variables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEnvironmentVariablesRepository)(nil).Save), ctx, apiID, variables)
}
