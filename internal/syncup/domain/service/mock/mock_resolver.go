// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/Aton-Kish/syncup/internal/syncup/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockResolverService is a mock of ResolverService interface.
type MockResolverService struct {
	ctrl     *gomock.Controller
	recorder *MockResolverServiceMockRecorder
}

// MockResolverServiceMockRecorder is the mock recorder for MockResolverService.
type MockResolverServiceMockRecorder struct {
	mock *MockResolverService
}

// NewMockResolverService creates a new mock instance.
func NewMockResolverService(ctrl *gomock.Controller) *MockResolverService {
	mock := &MockResolverService{ctrl: ctrl}
	mock.recorder = &MockResolverServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolverService) EXPECT() *MockResolverServiceMockRecorder {
	return m.recorder
}

// Difference mocks base method.
func (m *MockResolverService) Difference(ctx context.Context, resolvers1, resolvers2 []model.Resolver) ([]model.Resolver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", ctx, resolvers1, resolvers2)
	ret0, _ := ret[0].([]model.Resolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Difference indicates an expected call of Difference.
func (mr *MockResolverServiceMockRecorder) Difference(ctx, resolvers1, resolvers2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockResolverService)(nil).Difference), ctx, resolvers1, resolvers2)
}

// ResolvePipelineConfigFunctionIDs mocks base method.
func (m *MockResolverService) ResolvePipelineConfigFunctionIDs(ctx context.Context, resolver *model.Resolver, functions []model.Function) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePipelineConfigFunctionIDs", ctx, resolver, functions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolvePipelineConfigFunctionIDs indicates an expected call of ResolvePipelineConfigFunctionIDs.
func (mr *MockResolverServiceMockRecorder) ResolvePipelineConfigFunctionIDs(ctx, resolver, functions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePipelineConfigFunctionIDs", reflect.TypeOf((*MockResolverService)(nil).ResolvePipelineConfigFunctionIDs), ctx, resolver, functions)
}

// ResolvePipelineConfigFunctionNames mocks base method.
func (m *MockResolverService) ResolvePipelineConfigFunctionNames(ctx context.Context, resolver *model.Resolver, functions []model.Function) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePipelineConfigFunctionNames", ctx, resolver, functions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolvePipelineConfigFunctionNames indicates an expected call of ResolvePipelineConfigFunctionNames.
func (mr *MockResolverServiceMockRecorder) ResolvePipelineConfigFunctionNames(ctx, resolver, functions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePipelineConfigFunctionNames", reflect.TypeOf((*MockResolverService)(nil).ResolvePipelineConfigFunctionNames), ctx, resolver, functions)
}
