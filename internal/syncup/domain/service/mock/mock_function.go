// Code generated by MockGen. DO NOT EDIT.
// Source: function.go
//
// Generated by this command:
//
//	mockgen -source=function.go -destination=./mock/mock_function.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/Aton-Kish/syncup/internal/syncup/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFunctionService is a mock of FunctionService interface.
type MockFunctionService struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionServiceMockRecorder
}

// MockFunctionServiceMockRecorder is the mock recorder for MockFunctionService.
type MockFunctionServiceMockRecorder struct {
	mock *MockFunctionService
}

// NewMockFunctionService creates a new mock instance.
func NewMockFunctionService(ctrl *gomock.Controller) *MockFunctionService {
	mock := &MockFunctionService{ctrl: ctrl}
	mock.recorder = &MockFunctionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFunctionService) EXPECT() *MockFunctionServiceMockRecorder {
	return m.recorder
}

// Difference mocks base method.
func (m *MockFunctionService) Difference(ctx context.Context, functions1, functions2 []model.Function) ([]model.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Difference", ctx, functions1, functions2)
	ret0, _ := ret[0].([]model.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Difference indicates an expected call of Difference.
func (mr *MockFunctionServiceMockRecorder) Difference(ctx, functions1, functions2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Difference", reflect.TypeOf((*MockFunctionService)(nil).Difference), ctx, functions1, functions2)
}
