// Code generated by MockGen. DO NOT EDIT.
// Source: pull.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/Aton-Kish/syncup/internal/syncup/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockPullUseCase is a mock of PullUseCase interface.
type MockPullUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPullUseCaseMockRecorder
}

// MockPullUseCaseMockRecorder is the mock recorder for MockPullUseCase.
type MockPullUseCaseMockRecorder struct {
	mock *MockPullUseCase
}

// NewMockPullUseCase creates a new mock instance.
func NewMockPullUseCase(ctrl *gomock.Controller) *MockPullUseCase {
	mock := &MockPullUseCase{ctrl: ctrl}
	mock.recorder = &MockPullUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullUseCase) EXPECT() *MockPullUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPullUseCase) Execute(ctx context.Context, params *usecase.PullInput) (*usecase.PullOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, params)
	ret0, _ := ret[0].(*usecase.PullOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockPullUseCaseMockRecorder) Execute(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPullUseCase)(nil).Execute), ctx, params)
}
