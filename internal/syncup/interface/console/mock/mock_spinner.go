// Code generated by MockGen. DO NOT EDIT.
// Source: spinner.go
//
// Generated by this command:
//
//	mockgen -source=spinner.go -destination=./mock/mock_spinner.go
//
// Package mock_console is a generated GoMock package.
package mock_console

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// Mockispinner is a mock of ispinner interface.
type Mockispinner struct {
	ctrl     *gomock.Controller
	recorder *MockispinnerMockRecorder
}

// MockispinnerMockRecorder is the mock recorder for Mockispinner.
type MockispinnerMockRecorder struct {
	mock *Mockispinner
}

// NewMockispinner creates a new mock instance.
func NewMockispinner(ctrl *gomock.Controller) *Mockispinner {
	mock := &Mockispinner{ctrl: ctrl}
	mock.recorder = &MockispinnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockispinner) EXPECT() *MockispinnerMockRecorder {
	return m.recorder
}

// Active mocks base method.
func (m *Mockispinner) Active() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Active")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Active indicates an expected call of Active.
func (mr *MockispinnerMockRecorder) Active() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Active", reflect.TypeOf((*Mockispinner)(nil).Active))
}

// Color mocks base method.
func (m *Mockispinner) Color(colors ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Color", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Color indicates an expected call of Color.
func (mr *MockispinnerMockRecorder) Color(colors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Color", reflect.TypeOf((*Mockispinner)(nil).Color), colors...)
}

// Disable mocks base method.
func (m *Mockispinner) Disable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disable")
}

// Disable indicates an expected call of Disable.
func (mr *MockispinnerMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*Mockispinner)(nil).Disable))
}

// Enable mocks base method.
func (m *Mockispinner) Enable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enable")
}

// Enable indicates an expected call of Enable.
func (mr *MockispinnerMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*Mockispinner)(nil).Enable))
}

// Enabled mocks base method.
func (m *Mockispinner) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockispinnerMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*Mockispinner)(nil).Enabled))
}

// Lock mocks base method.
func (m *Mockispinner) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockispinnerMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*Mockispinner)(nil).Lock))
}

// Restart mocks base method.
func (m *Mockispinner) Restart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart")
}

// Restart indicates an expected call of Restart.
func (mr *MockispinnerMockRecorder) Restart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*Mockispinner)(nil).Restart))
}

// Reverse mocks base method.
func (m *Mockispinner) Reverse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reverse")
}

// Reverse indicates an expected call of Reverse.
func (mr *MockispinnerMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*Mockispinner)(nil).Reverse))
}

// SetFinalMsg mocks base method.
func (m *Mockispinner) SetFinalMsg(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalMsg", msg)
}

// SetFinalMsg indicates an expected call of SetFinalMsg.
func (mr *MockispinnerMockRecorder) SetFinalMsg(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalMsg", reflect.TypeOf((*Mockispinner)(nil).SetFinalMsg), msg)
}

// SetSuffix mocks base method.
func (m *Mockispinner) SetSuffix(suffix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSuffix", suffix)
}

// SetSuffix indicates an expected call of SetSuffix.
func (mr *MockispinnerMockRecorder) SetSuffix(suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuffix", reflect.TypeOf((*Mockispinner)(nil).SetSuffix), suffix)
}

// Start mocks base method.
func (m *Mockispinner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockispinnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mockispinner)(nil).Start))
}

// Stop mocks base method.
func (m *Mockispinner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockispinnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mockispinner)(nil).Stop))
}

// Unlock mocks base method.
func (m *Mockispinner) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockispinnerMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*Mockispinner)(nil).Unlock))
}

// UpdateCharSet mocks base method.
func (m *Mockispinner) UpdateCharSet(cs []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCharSet", cs)
}

// UpdateCharSet indicates an expected call of UpdateCharSet.
func (mr *MockispinnerMockRecorder) UpdateCharSet(cs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharSet", reflect.TypeOf((*Mockispinner)(nil).UpdateCharSet), cs)
}

// UpdateSpeed mocks base method.
func (m *Mockispinner) UpdateSpeed(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateSpeed", d)
}

// UpdateSpeed indicates an expected call of UpdateSpeed.
func (mr *MockispinnerMockRecorder) UpdateSpeed(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpeed", reflect.TypeOf((*Mockispinner)(nil).UpdateSpeed), d)
}
