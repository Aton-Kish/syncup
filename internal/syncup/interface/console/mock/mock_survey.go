// Code generated by MockGen. DO NOT EDIT.
// Source: survey.go
//
// Generated by this command:
//
//	mockgen -source=survey.go -destination=./mock/mock_survey.go
//
// Package mock_console is a generated GoMock package.
package mock_console

import (
	context "context"
	reflect "reflect"

	survey "github.com/AlecAivazis/survey/v2"
	gomock "go.uber.org/mock/gomock"
)

// Mockisurvey is a mock of isurvey interface.
type Mockisurvey struct {
	ctrl     *gomock.Controller
	recorder *MockisurveyMockRecorder
}

// MockisurveyMockRecorder is the mock recorder for Mockisurvey.
type MockisurveyMockRecorder struct {
	mock *Mockisurvey
}

// NewMockisurvey creates a new mock instance.
func NewMockisurvey(ctrl *gomock.Controller) *Mockisurvey {
	mock := &Mockisurvey{ctrl: ctrl}
	mock.recorder = &MockisurveyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockisurvey) EXPECT() *MockisurveyMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *Mockisurvey) Confirm(ctx context.Context, prompt *survey.Confirm, opts ...survey.AskOpt) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Confirm", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockisurveyMockRecorder) Confirm(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*Mockisurvey)(nil).Confirm), varargs...)
}

// InputInt mocks base method.
func (m *Mockisurvey) InputInt(ctx context.Context, prompt *survey.Input, opts ...survey.AskOpt) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InputInt", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputInt indicates an expected call of InputInt.
func (mr *MockisurveyMockRecorder) InputInt(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputInt", reflect.TypeOf((*Mockisurvey)(nil).InputInt), varargs...)
}

// InputString mocks base method.
func (m *Mockisurvey) InputString(ctx context.Context, prompt *survey.Input, opts ...survey.AskOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InputString", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputString indicates an expected call of InputString.
func (mr *MockisurveyMockRecorder) InputString(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputString", reflect.TypeOf((*Mockisurvey)(nil).InputString), varargs...)
}

// MultiSelect mocks base method.
func (m *Mockisurvey) MultiSelect(ctx context.Context, prompt *survey.MultiSelect, opts ...survey.AskOpt) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSelect", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSelect indicates an expected call of MultiSelect.
func (mr *MockisurveyMockRecorder) MultiSelect(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSelect", reflect.TypeOf((*Mockisurvey)(nil).MultiSelect), varargs...)
}

// Password mocks base method.
func (m *Mockisurvey) Password(ctx context.Context, prompt *survey.Password, opts ...survey.AskOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Password", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Password indicates an expected call of Password.
func (mr *MockisurveyMockRecorder) Password(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*Mockisurvey)(nil).Password), varargs...)
}

// Select mocks base method.
func (m *Mockisurvey) Select(ctx context.Context, prompt *survey.Select, opts ...survey.AskOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockisurveyMockRecorder) Select(ctx, prompt any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*Mockisurvey)(nil).Select), varargs...)
}
